"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.goodbyeImage = exports.welcomeImage = exports.drawCard = exports.themes = void 0;
const canvas_1 = require("canvas");
const fs_1 = require("fs");
const path_1 = require("path");
__exportStar(require("@discord-card/core"), exports);
const production = true;
function getFontSize(str) {
    if (str.length < 18)
        return 30;
    return (600 * Math.pow(str.length, -1.05)).toFixed(0);
}
const root = path_1.join(__dirname, '..', 'images');
exports.themes = {
    'dark': { color: '#ffffff', image: path_1.join(root, 'dark.png') },
    'sakura': { color: '#7d0b2b', image: path_1.join(root, 'sakura.png') },
    'blue': { color: '#040f57', image: path_1.join(root, 'blue.png') },
    'bamboo': { color: '#137a0d', image: path_1.join(root, 'bamboo.png') },
    'desert': { color: '#000000', image: path_1.join(root, 'desert.png'), font: 'Segoe Print' },
    'code': { color: '#ffffff', image: path_1.join(root, 'code.png'), font: 'Source Sans Pro' },
};
var count = 0;
function snap(c) {
    if (!production)
        fs_1.writeFileSync(`./snapshots/${count}.png`, c.toBuffer('image/png'));
    count++;
}
async function drawCard(options) {
    const w = 700, h = 250;
    const canvas = canvas_1.createCanvas(w, h);
    const ctx = canvas.getContext('2d');
    ctx.w = ctx.width = w;
    ctx.h = ctx.height = h;
    //@ts-ignore
    var theme = options.theme ?? 'sakura';
    var background;
    //Parsing the Theme
    if (typeof theme === 'string') {
        //Builtin Theme
        theme = exports.themes[theme];
        if (!theme)
            throw new Error('Invalid theme, use: ' + Object.keys(exports.themes).join(' | '));
        background = await canvas_1.loadImage(theme.image);
    }
    else {
        //Loading the Background
        try {
            background = await canvas_1.loadImage(theme.image);
        }
        catch (e) {
            throw new Error('Invalid Path or Buffer provided.');
        }
    }
    ctx.theme = theme;
    const b = 10; //Border
    //Background
    snap(canvas);
    if (options.rounded)
        ctx.roundRect(0, 0, w, h, h / 15);
    else
        ctx.rect(0, 0, w, h);
    ctx.clip();
    if (options.border) {
        ctx.drawImage(background, 0, 0, w, h);
        ctx.globalAlpha = 0.3;
        ctx.fillStyle = '#000';
        ctx.fillRect(0, 0, w, h);
        ctx.globalAlpha = 1;
        ctx.blur(3);
    }
    snap(canvas);
    //Rounded Edges
    if (options.border) {
        if (options.rounded)
            ctx.roundRect(b, b, w - 2 * b, h - 2 * b, h / 15);
        else
            ctx.rect(b, b, w - (2 * b), h - (2 * b));
        ctx.clip();
    }
    else {
        if (options.rounded)
            ctx.roundRect(0, 0, w, h, h / 15).clip();
        else
            ctx.rect(0, 0, w, h);
    }
    var temp = background;
    if (options.blur) {
        console.log('Q');
        var blur = canvas_1.createCanvas(w, h), blur_ctx = blur.getContext('2d');
        blur_ctx.drawImage(background, 0, 0, w, h);
        if (typeof options.blur === 'boolean')
            blur_ctx.blur(3);
        else
            blur_ctx.blur(options.blur);
        temp = blur;
    }
    if (options.border)
        ctx.drawImage(temp, b, b, w - b * 2, h - b * 2);
    else
        ctx.drawImage(temp, 0, 0, w, h);
    snap(canvas);
    //Setting Styles
    ctx.fillStyle = theme.color.toString(ctx);
    ctx.strokeStyle = theme.color.toString(ctx);
    ctx.font = '30px ' + (theme.font ? theme.font : 'sans-serif');
    //Drawing
    //Title
    ctx.changeFontSize('30px')
        .fillText(options.title ?? '', ctx.width / 2.7, ctx.height / 3.5);
    //Text
    ctx.changeFontSize(getFontSize(options.text ?? '') + 'px')
        .fillText(options.text ?? '', ctx.width / 2.7, ctx.height / 1.8);
    //Subtitle
    ctx.changeFontSize('25px')
        .fillText(options.subtitle ?? '', ctx.width / 2.7, ctx.height / 1.3);
    //Avatar Image
    const radius = h / 2.5;
    ctx.lineWidth = 6;
    ctx.beginPath();
    ctx.arc(h / 2, h / 2, radius, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.clip();
    if (options.avatar) {
        if (options.avatar instanceof canvas_1.Canvas || options.avatar instanceof canvas_1.Image)
            ctx.drawImage(options.avatar, radius / 4, radius / 4, radius * 2, radius * 2);
        else if (typeof options.avatar === 'string' || options.avatar instanceof Buffer)
            ctx.drawImage(await canvas_1.loadImage(options.avatar), radius / 4, radius / 4, radius * 2, radius * 2);
        else
            throw new Error('Invalid Avatar Argument');
    }
    if (options.custom)
        options.custom(ctx);
    snap(canvas);
    return canvas.toBuffer('image/png');
}
exports.drawCard = drawCard;
async function welcomeImage(member, opts = {}) {
    opts.title = opts.title ?? `Welcome to this server,`;
    opts.text = opts.text ?? `${member.user.tag}!`;
    opts.subtitle = opts.subtitle ?? `MemberCount: ${member.guild.memberCount}`;
    opts.theme = opts.theme ?? 'sakura';
    opts.avatar = opts.avatar ?? await canvas_1.loadImage(member.user.displayAvatarURL({ format: 'png' }));
    const buff = await drawCard(opts);
    return buff;
}
exports.welcomeImage = welcomeImage;
async function goodbyeImage(member, opts = {}) {
    opts.title = opts.title ?? `Goodbye,`;
    opts.text = opts.text ?? `${member.user.tag}!`;
    opts.theme = opts.theme ?? 'sakura';
    opts.avatar = opts.avatar ?? await canvas_1.loadImage(member.user.displayAvatarURL({ format: 'png' }));
    const buff = await drawCard(opts);
    return buff;
}
exports.goodbyeImage = goodbyeImage;
//# sourceMappingURL=index.js.map